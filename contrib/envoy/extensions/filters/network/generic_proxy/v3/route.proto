syntax = "proto3";

package envoy.extensions.filters.network.generic_proxy.v3;

import "xds/annotations/v3/status.proto";
import "xds/type/matcher/v3/matcher.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.network.generic_proxy.v3";
option java_outer_classname = "RouteProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/network/generic_proxy/v3;generic_proxyv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Generic Proxy Route Configuration]

// The generic proxy makes use of the `xds matching API` for routing configurations.
//
// In the below example, we combine a top level tree matcher with a linear matcher to match
// the incoming requests, and send the matching requests to v1 of the upstream service.
//
// .. code-block:: yaml
//
//   name: example
//   routes:
//     matcher_tree:
//       input:
//         name: request-service
//         typed_config:
//           "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.ServiceMatchInput
//       exact_match_map:
//         map:
//           service_name_0:
//             matcher:
//               matcher_list:
//                 matchers:
//                 - predicate:
//                     and_matcher:
//                       predicate:
//                       - single_predicate:
//                           input:
//                             name: request-properties
//                             typed_config:
//                               "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.PropertyMatchInput
//                               property_name: version
//                           value_match:
//                             exact: v1
//                       - single_predicate:
//                           input:
//                             name: request-properties
//                             typed_config:
//                               "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.matcher.v3.PropertyMatchInput
//                               property_name: user
//                           value_match:
//                             exact: john
//                   on_match:
//                     action:
//                       name: route
//                       typed_config:
//                         "@type": type.googleapis.com/envoy.extensions.filters.network.generic_proxy.action.v3.routeAction
//                         cluster: cluster_0
message RouteConfiguration {
  // The name of the route configuration. For example, it might match route_config_name in
  // envoy.extensions.filters.network.generic_proxy.v3.Rds.
  string name = 1 [(validate.rules).string = {min_len: 1}];

  // The match tree to use when resolving route actions for incoming requests.
  xds.type.matcher.v3.Matcher routes = 2 [(validate.rules).message = {required: true}];
}
