syntax = "proto3";

// [#proto-status: draft]

package envoy.service.auth.v2;
option go_package = "v2";
option java_generic_services = true;

import "envoy/service/auth/v2/attribute_context.proto";

import "google/rpc/status.proto";

// A generic interface for performing authorization check on incoming
// requests to a networked service.
service Authorization {
  // Performs authorization check based on the attributes associated with the
  // incoming request, and returns status `OK` or not `OK`.
  rpc Check(CheckRequest) returns (CheckResponse);
}

message CheckRequest {
  // The request attributes.
  AttributeContext attributes = 1;
}

// Dscribes an HTTP/1.1 response.
message HttpReponse {
  // Http headers fields.
  map<string, string> headers = 1;

  // Http body.
  string body = 2;
}

message CheckResponse {
  // Status `OK` allows the request. Any other status indicates the request should be denied.
  google.rpc.Status status = 1;

  // Supplies additional HTTP body and headers depending on the authorization status check.
  // When the response is OK, this message allows to modify the existing request headers before
  // dispatching them to the upstream. In this case, the authorization sercice should provide only
  // headers since body is more likely to be ignored. When the status is not OK, e.g.
  // NOT_AUTHORIZED, this message can be used to serve the downstream client with addional HTTP
  // headers and body if necessary.
  HttpReponse http_response = 2;
}
