
syntax = "proto3";

package envoy.config.filter.http.jwt_authn.v2;

import "envoy/api/v2/route/route.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

// JSON Web Token (JWT) token format for authentication is defined
// `here <https://tools.ietf.org/html/rfc7519>`_.
// See `OAuth2.0 <https://tools.ietf.org/html/rfc6749>`_ and
// `OIDC1.0 <http://openid.net/connect>`_ for the authentication flow.
//
// Example,::
//
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//       bookstore_web.apps.googleusercontent.com
//     jwks_uri: https://example.com/.well-known/jwks.json
//
// [#not-implemented-hide:]
message JSONWebToken {
  // Identifies the principal that issued the JWT. See
  // `here <https://tools.ietf.org/html/rfc7519#section-4.1.1>`_.
  // Usually a URL or an email address.
  //
  // Example: https://securetoken.google.com
  // Example: 1234567-compute@developer.gserviceaccount.com
  //
  string issuer = 1;

  // The list of JWT `audiences
  // <https://tools.ietf.org/html/rfc7519#section-4.1.3>`_. that are allowed to
  // access. A JWT containing any of these audiences will be accepted.
  //
  // Example::
  //
  //     audiences:
  //     - bookstore_android.apps.googleusercontent.com
  //       bookstore_web.apps.googleusercontent.com
  //
  repeated string audiences = 2;

  // URL of the provider's public key set to validate signature of the
  // JWT. See `OpenID
  // Discovery
  // <https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata>`_
  //
  // Example: https://www.googleapis.com/oauth2/v1/certs
  string jwks_uri = 3;

  // This field is specific for Envoy proxy implementation.
  // It is the cluster name in the Envoy "cluster_manager" config section.
  // In order for Envoy to call "jwks_uri", its host has to be specified
  // as a "cluster" in the config for each jwks_uri.
  string jwks_uri_cluster = 4;

  // Duration after which the cached public key should be expired. The
  // system wide default is applied if no duration is explicitly
  // specified.
  google.protobuf.Duration public_key_cache_duration = 5;

  // If false, the JWT is removed in the request after a success verification.
  // Set it true, if don't want it to be removed.
  google.protobuf.BoolValue forward_jwt = 6;

  // If true, the request is allowed if the JWT verification fails
  // Default is not allowed.
  google.protobuf.BoolValue allow_failed_jwt = 7;

  // Two fields below define where to extract the JWT from an HTTP request.
  //
  // If no explicit location is specified, the following default locations are
  // tried in order:
  //
  // 1. The Authorization header using the Bearer schema.
  //    See `here <https://tools.ietf.org/html/rfc6750#section-2.1>`_
  //    Example::
  //
  //       Authorization: Bearer <token>.
  //
  // 2. `access_token` query parameter.
  //    See `here <https://tools.ietf.org/html/rfc6750#section-2.3>`_
  //
  //
  // Only the first JWT token is verified per request if multiple tokens are
  // specified.
  //
  // If both jwt_headers and jwt_params are specified, jwt_headers will be
  // checked first.
  //

  // Specify the HTTP headers to extract JWT token.
  //
  // For examples, following config::
  //
  //   jwt_headers:
  //   -name: x-goog-iap-jwt-assertion
  //
  // can be used to extract token from header::
  //
  //   x-goog-iap-jwt-assertion: <JWT>.
  //
  repeated JwtHeader jwt_headers = 8;

  // JWT is sent in a query parameter. `jwt_params` represents the
  // query parameter names.
  //
  // For example, if config is::
  //
  //   jwt_params:
  //     jwt_token
  //
  // The query parameter is::
  //
  //    /path?jwt_token=<JWT>
  //
  repeated string jwt_params = 9;
}

// This message specifies a header location to extract JWT token.
// A HTTP header format is::
//
//    name: value_prefix<JWT>
//
message JwtHeader {
  // The HTTP header name.
  string name = 1;

  // The value prefix. The value format is "prefix<token>"
  // For example, for "Authorization: Bearer <token>",
  // value_prefix="Bearer " with a space at the end.
  string value_prefix = 2;
}

// This message defines a pattern to match a HTTP request.
// A pattern is matched only if all "headers" are matched.
message HttpMatcher {
  // Specifies a set of headers should match on.
  // For example::
  //
  //    headers:
  //    - name: :method
  //      value: OPTIONS
  //    headers:
  //    - name: :path
  //      regex_match: /.*
  //
  repeated envoy.api.v2.route.HeaderMatcher headers = 1;
}

// This is the Envoy filter config for JSON Web Token authentication.
// If a JWT is sucessfully verified, header "sec-istio-auth-userinfo" will
// be added with base64 encoded JSON payload to be send to the backend.
// [#not-implemented-hide:]
message JSONWebTokenAuthentication {
  // List of JWT rules to valide.
  //
  // If the request includes a JWT, it must match one of the JWT listed
  // here with the same issuer.
  //
  repeated JSONWebToken jwts = 1;

  // If true, the request is allowed if JWT is missing.
  // Default is not allowed.
  google.protobuf.BoolValue allow_missing_jwt = 2;

  // This applies when JWT is missing and allow_missing_jwt is false.
  // If a request doesn't have JWT, it will be rejected.
  // But some requests can be forwarded without JWT, such as OPTIONS for CORS
  // and some health checking paths.
  //
  // Examples: bypass all CORS options requests::
  //
  //   bypass_jwt:
  //      headers:
  //      - name: :method
  //        value: OPTIONS
  //      headers:
  //      - name: :path
  //        regex_match: /.*
  //
  // Examples: bypass /healthz check::
  //
  //   bypass_jwt:
  //      headers:
  //      - name: :method
  //        value: GET
  //      headers:
  //      - name: :path
  //        exact_match: /healthz
  //
  repeated HttpMatcher bypass_jwt = 3;
}
