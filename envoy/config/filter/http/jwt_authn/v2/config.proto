
syntax = "proto3";

package envoy.config.filter.http.jwtauthn.v2;

import "envoy/api/v2/route/route.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

// JSON Web Token (JWT) token format for authentication is defined
// `here <https://tools.ietf.org/html/rfc7519>`_.
// See `OAuth2.0 <https://tools.ietf.org/html/rfc6749>`_ and
// `OIDC1.0 <http://openid.net/connect>`_ for the authentication flow.
//
// Example:
//
// .. code-block:: yaml
//
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//       bookstore_web.apps.googleusercontent.com
//     jwks_uri: https://example.com/.well-known/jwks.json
//
// [#not-implemented-hide:]
message JWT {
  // Identifies the principal that issued the JWT. See
  // `here <https://tools.ietf.org/html/rfc7519#section-4.1.1>`_.
  // Usually a URL or an email address.
  //
  // Example: https://securetoken.google.com
  // Example: 1234567-compute@developer.gserviceaccount.com
  //
  string issuer = 1;

  // The list of JWT `audiences
  // <https://tools.ietf.org/html/rfc7519#section-4.1.3>`_. that are allowed to
  // access. A JWT containing any of these audiences will be accepted.
  //
  // Example:
  //
  // .. code-block:: yaml
  //
  //     audiences:
  //     - bookstore_android.apps.googleusercontent.com
  //       bookstore_web.apps.googleusercontent.com
  //
  repeated string audiences = 2;

  // `Json web key set <https://tools.ietf.org/html/rfc7517#appendix-A>`_ URI.
  // Json web key set is fetched from the URI to validate signature of the JWT.
  // See `OpenID Discovery
  // <https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata>`_
  //
  // Example:  jwks_uri:
  //
  // .. code-block:: yaml
  //
  //    jwks_uri: https://www.googleapis.com/oauth2/v1/certs
  //
  string jwks_uri = 3;

  // This field is specific for Envoy proxy implementation.
  // It is the cluster name in the Envoy "cluster_manager" config section.
  // In order for Envoy to call "jwks_uri", its host has to be specified
  // as a "cluster" in the config for each jwks_uri.
  //
  // Example:  jwks cluster in "cluster_manager" section of Envoy config.
  //
  // .. code-block:: json
  //
  //    {
  //      "name": "jwt.www.googleapis.com|443",
  //      "connect_timeout_ms": 1000,
  //      "type": "strict_dns",
  //      "lb_type": "round_robin",
  //         "hosts": [
  //            {
  //              "url": "tcp://www.googleapis.com:443"
  //            }
  //          ],
  //      "ssl_context": {},
  //      "circuit_breakers": {
  //         "default": {
  //           "max_pending_requests": 10000,
  //           "max_requests": 10000
  //         }
  //      }
  //    }
  //
  // Example:  jwks_uri_cluster:
  //
  // .. code-block:: yaml
  //
  //    jwks_uri: https://www.googleapis.com/oauth2/v1/certs
  //    jwks_uri_cluster: jwt.www.googleapis.com|443
  //
  string jwks_uri_cluster = 4;

  // Duration after which the cached public key should be expired. If not
  // specified, default cache duration is 5 minutes.
  google.protobuf.Duration public_key_cache_duration = 5;

  // If false, the JWT is removed in the request after a success verification.
  // Set it true, if don't want it to be removed.
  // Default value is false which is to remove JWT.
  bool forward_jwt = 6;

  // If true, the request is allowed if the JWT verification fails.
  // Default value is false; JWT verification failed request will be rejected.
  bool allow_failed_jwt = 7;

  // Two fields below define where to extract the JWT from an HTTP request.
  //
  // If no explicit location is specified, the following default locations are
  // tried in order:
  //
  // 1. The Authorization header using the Bearer schema.
  //    See `here <https://tools.ietf.org/html/rfc6750#section-2.1>`_
  //    Example::
  //
  //       Authorization: Bearer <token>.
  //
  // 2. `access_token` query parameter.
  //    See `here <https://tools.ietf.org/html/rfc6750#section-2.3>`_
  //
  //
  // Only the first JWT token is verified per request if multiple tokens are
  // specified.
  //
  // If both jwt_headers and jwt_params are specified, jwt_headers will be
  // checked first.
  //

  // Specify the HTTP headers to extract JWT token.
  //
  // For examples, following config::
  //
  // .. code-block:: yaml
  //
  //   jwt_headers:
  //   - name: x-goog-iap-jwt-assertion
  //
  // can be used to extract token from header::
  //
  //   x-goog-iap-jwt-assertion: <JWT>.
  //
  repeated JwtHeader jwt_headers = 8;

  // JWT is sent in a query parameter. `jwt_params` represents the
  // query parameter names.
  //
  // For example, if config is::
  //
  // .. code-block:: yaml
  //
  //   jwt_params:
  //   - jwt_token
  //
  // The query parameter is::
  //
  //    /path?jwt_token=<JWT>
  //
  repeated string jwt_params = 9;

  // Following two fields specify if the payload of a successfully verified
  // JWT should be forwarded to the backend, and how to forward it.
  // The forwarded data is: base64_encoded(jwt_payload_in_JSON)

  // If false, JWT payload will be forwarded. This is the default value.
  // If true, it is not forwarded.
  bool not_jwt_payload = 10;

  // This field specifies the header name to forward JWT payload.
  // If it is not specified, the name "sec-istio-auth-userinfo" will be used.
  // If multiple JWTs needed to be forwarded, please use different header names.
  string jwt_payload_header = 11;
}

// This message specifies a header location to extract JWT token.
// A HTTP header format is::
//
//    name: value_prefix<JWT>
//
message JwtHeader {
  // The HTTP header name.
  string name = 1;

  // The value prefix. The value format is "prefix<token>"
  // For example, for "Authorization: Bearer <token>",
  // value_prefix="Bearer " with a space at the end.
  string value_prefix = 2;
}

// This message defines a pattern to match a HTTP request.
// A pattern is matched only if all "headers" are matched.
message HttpMatcher {
  // Specifies a set of headers should match on.
  // For example::
  //
  // .. code-block:: yaml
  //
  //    headers:
  //    - name: :method
  //      value: OPTIONS
  //    headers:
  //    - name: :path
  //      regex_match: /.*
  //
  repeated envoy.api.v2.route.HeaderMatcher headers = 1;
}

// This is the Envoy filter config for JSON Web Token authentication.
// If a JWT is sucessfully verified, header "sec-istio-auth-userinfo" will
// be added with base64 encoded JSON payload to be send to the backend.
// [#not-implemented-hide:]
message JWTAuthentication {
  // List of JWT rules to valide.
  //
  // If the request includes a JWT, it must match one of the JWT listed
  // here with the same issuer.
  //
  repeated JWT jwt_rules = 1;

  // If true, the request is allowed if JWT is missing.
  // Default is not allowed.
  bool allow_missing_jwt = 2;

  // This applies when JWT is missing and allow_missing_jwt is false.
  // If a request doesn't have JWT, it will be rejected.
  // But some requests can be forwarded without JWT, such as OPTIONS for CORS
  // and some health checking paths.
  //
  // Examples: bypass all CORS options requests::
  //
  // .. code-block:: yaml
  //
  //   bypass_jwt:
  //   - headers:
  //     - name: :method
  //       value: OPTIONS
  //   - headers:
  //     - name: :path
  //       regex_match: /.*
  //
  // Examples: bypass /healthz check::
  //
  // .. code-block:: yaml
  //
  //   bypass_jwt:
  //   - headers:
  //     - name: :method
  //       value: GET
  //   - headers:
  //     - name: :path
  //       exact_match: /healthz
  //
  repeated envoy.api.v2.route.RouteMatch bypass_jwt = 3;
}
