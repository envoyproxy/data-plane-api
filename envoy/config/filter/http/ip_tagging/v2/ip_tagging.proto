syntax = "proto3";

package envoy.config.filter.http.ip_tagging.v2;
option go_package = "v2";

import "envoy/api/v2/core/address.proto";

import "google/protobuf/wrappers.proto";

import "validate/validate.proto";

message IPTagging {

  // The type of requests the filter should apply to. The supported types
  // are internal, external or both. A request is considered internal if
  // :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
  // is set to true. If :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
  // is not set or false, a request is considered external. The filter defaults to both,
  // and it will apply to all request types.
  enum RequestType {
    // Both external and internal requests will be tagged. This is the default value.
    BOTH = 0;

    // Only internal requests will be tagged.
    INTERNAL = 1;

    // Only external requests will be tagged.
    EXTERNAL = 2;
  }

  // The type of request the filter should apply to.
  RequestType request_type = 1 [(validate.rules).enum.defined_only = true];

  // Supplies the fraction of completeness to use when calculating the branch.
  // If not set, the default value is 0.5.
  //
  // .. note::
  //
  //  The fill_factor supports a value greater than 0 and less than or equal
  //  to 1.
  google.protobuf.DoubleValue fill_factor = 2 [(validate.rules).double = {gt: 0.0, lte: 1.0}];

  // Specifies the branch value to use at the root of the trie. If not
  // set, the default value is 0 and a branch value will be calculated during
  // Level Compressed Trie creation.
  //
  // .. note::
  //
  //  The filter supports a range 0 - 20 inclusively for root branching factor.
  google.protobuf.UInt32Value root_branching_factor = 3
      [(validate.rules).uint32 = {gte: 0, lte: 20}];

  // Supplies the IP tag name and the IP address and subnet
  message IPTag {
    // Specifies the IP tag name to apply.
    string ip_tag_name = 1;

    // A list of IP address subnets that will be tagged with
    // ip_tag_name. Both IPv4 and IPv6 are supported.
    repeated envoy.api.v2.core.CidrRange ip_list = 2;
  }

  // The set of IP tags for the filter.
  repeated IPTag ip_tags = 4;
}
