syntax = "proto3";

import "validate/validate.proto";

package envoy.config.rbac.v2alpha;

// RBAC (Role Based Access Control) defines ServiceRole and ServiceRoleBinding
// objects. The protos in this file define the RBAC policies entered by a user.

// ServiceRole specification contains a list of access rules (permissions).
// This represents the "Spec" part of the ServiceRole object. The name and namespace
// of the ServiceRole is specified in "metadata" section of the ServiceRole object.
message ServiceRole {
  // Required. The set of access rules (permissions) that the role has.
  repeated AccessRule rules = 1 [(validate.rules).repeated .min_items = 1];
}

// AccessRule defines a permission to access a list of services.
message AccessRule {
  // Required. A list of service names.
  // Exact match, prefix match, and suffix match are supported for service names.
  // For example, the service name "bookstore.mtv.svc.cluster.local" matches
  // "bookstore.mtv.svc.cluster.local" (exact match), or "bookstore*" (prefix match),
  // or "*.mtv.svc.cluster.local" (suffix match).
  // If set to ["*"], it refers to all services in the namespace.
  repeated string services = 1 [(validate.rules).repeated .min_items = 1];

  // Optional. A list of HTTP paths or gRPC methods.
  // gRPC methods must be presented as fully-qualified name in the form of
  // packageName.serviceName/methodName.
  // Exact match, prefix match, and suffix match are supported for paths.
  // For example, the path "/books/review" matches
  // "/books/review" (exact match), or "/books/*" (prefix match),
  // or "*/review" (suffix match).
  // If not specified, it applies to any path.
  repeated string paths = 2;

  // Optional. A list of HTTP verbs (e.g., "GET", "POST").
  // It is ignored in gRPC case because the value is always "POST".
  // If set to ["*"] or not specified, it applies to any verb.
  repeated string verbs = 3;

  // Definition of a custom constraint. The key in the constraint refers to an attribute defined in
  // :ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`. For example,
  // destination.labels["app"], request.http.headers["version"].
  message Constraint {
    // Key of the constraint.
    string key = 1;

    // List of valid values for the constraint.
    // Exact match, prefix match, and suffix match are supported for constraint values.
    // For example, the value "v1alpha2" matches
    // "v1alpha2" (exact match), or "v1*" (prefix match),
    // or "*alpha2" (suffix match).
    repeated string values = 2 [(validate.rules).repeated .min_items = 1];
  }

  // Optional. Extra constraints in the ServiceRole specification.
  // The above ServiceRole examples shows an example of constraint "version".
  repeated Constraint constraints = 4;
}

// ServiceRoleBinding assigns a ServiceRole to a list of subjects.
// This represents the "Spec" part of the ServiceRoleBinding object. The name and namespace
// of the ServiceRoleBinding is specified in "metadata" section of the ServiceRoleBinding
// object.
message ServiceRoleBinding {
  // Required. List of subjects that are assigned the ServiceRole object.
  repeated Subject subjects = 1 [(validate.rules).repeated .min_items = 1];

  // Optional. Reference to the ServiceRole object.
  // role_ref is needed when a user defines a ServiceRoleBinding object.
  // When used in a proxy filter configuration, this field is optional.
  RoleRef role_ref = 2 [(validate.rules).message.required = true];
}

// Subject defines an identity or a group of identities. The identity is either a user or
// a group or identified by a set of attributes. The attribute names are defined in
// :ref: `AttributeContext <envoy_api_msg_service.auth.v2alpha.AttributeContext>`.
// For example, source.service, source.labels["app"], request.http.headers["version"].
message Subject {
  // Optional. The user name/ID that the subject represents.
  string user = 1;

  // Optional. The group that the subject belongs to.
  string group = 2;

  // Optional. The set of attributes that identify the subject.
  map<string, string> attributes = 3;
}

// RoleRef refers to a role object.
message RoleRef {
  // Required. The name of the ServiceRole object being referenced.
  string name = 2;
}
