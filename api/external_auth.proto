syntax = "proto3";

// [#proto-status: draft]

package envoy.api.v2;


import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

// Authorization service.
// Primarily responds with OK or NOT OK.
service Authorization {
   rpc Check(CheckRequest) returns (CheckResponse);
}

message CheckRequest {
    // The name of the tenant for multi-tenant support.
    string tenant_name = 1;

    // The request attributes.
    AttributeContext attributes = 2;
}

message CheckResponse {
    // Status OK allows the request. Any other response indicates the request should be denied.
    google.rpc.Status status = 1;
}

// An attribute is a piece of metadata that describes an activity on a network.
// For example, the size of an HTTP request, or the status code of an HTTP response.
//
// Each attribute has a type and a name, which is logically defined as a proto message field.
// The fields follow the Istio attribute vocabulary.
// https://istio.io/docs/reference/config/mixer/attribute-vocabulary.html
// The field type becomes the attribute type, and the field path becomes the attribute name.
// For example, the attribute `source.ip` maps to field `AttributeContext.source.ip`.
message AttributeContext {
  // This message defines attributes for a node that handles a network request.
  // The node can be either a service or an application that sends, forwards,
  // or receives the request. Service peers should fill in the `service`,
  // `principal`, and `labels` as appropriate.
  message Peer {
    // The IP address of the peer.
    string ip = 1;

    // The network port of the peer.
    int64 port = 2;

    // The canonical service name of the peer.
    string service = 3;

    // The labels associated with the peer.
    // These could be pod labels for Kubernetes or tags for VMs.
    // The source of the labels could be an X.509 certificate or other configuration.
    map<string, string> labels = 4;

    // The identity of this peer. Similar to `Request.auth.principal`, but
    // relative to the peer instead of the request. For example, the
    // the identity associated with the workload.
    // This field can be sourced from the `Subject Aleternative Names` of an X.509 certificate. 
    repeated string principals = 5;

    // Other claims about the peer that are not captured in labels and principals.
    google.protobuf.Struct claims = 6;

    // The CLDR country/region code associated with the above IP address.
    // If the IP address is private, the `region_code` should reflect the
    // physical location where this peer is running.
    string region_code = 7;
  }

  // This message defines request authentication attributes. Terminology is
  // based on the JSON Web Token (JWT) standard, but the terms also
  // correlate to concepts in other standards.
  message Auth {
    // The authenticated principal. Reflects the issuer (`iss`) and subject
    // (`sub`) claims within a JWT, usually by joining them with a `/`.
    string principal = 1;

    // The intended audience(s) for this authentication information. Reflects
    // the audience (`aud`) claim within a JWT. The audience
    // value(s) depends on the `issuer`, but typically include one or more of
    // the following pieces of information:
    //
    // *  The services intended to receive the credential such as
    //    ["pubsub.googleapis.com", "storage.googleapis.com"]
    // *  A set of service-based scopes. For example,
    //    ["https://www.googleapis.com/auth/cloud-platform"]
    // *  The client id of an app, such as the Firebase project id for JWTs
    //    from Firebase Auth.
    //
    repeated string audiences = 2;

    // The authorized presenter of the credential. Reflects the optional
    // Authorized Presenter (`azp`) claim within a JWT or the
    // OAuth client id. For example, a Google Cloud Platform client id looks
    // as follows: "123456789012.apps.googleusercontent.com".
    string presenter = 3;

    // Structured claims presented with the credential. JWTs include
    // `{key: value}` pairs for standard and private claims. The following
    // is a subset of the standard required and optional claims that would
    // typically be presented for a Google-based JWT:
    //
    //    {'iss': 'accounts.google.com',
    //     'sub': '113289723416554971153',
    //     'aud': ['123456789012', 'pubsub.googleapis.com'],
    //     'azp': '123456789012.apps.googleusercontent.com',
    //     'email': 'jsmith@example.com',
    //     'iat': 1353601026,
    //     'exp': 1353604926}
    //
    // SAML assertions are similarly specified, but with an identity provider
    // dependent structure.
    google.protobuf.Struct claims = 4;
  }

  // This message defines attributes for an HTTP request. If the actual
  // request is not an HTTP request, the runtime system should try to map
  // the actual request to an equivalent HTTP request.
  message Request {
    // The unique ID for a request, which can be propagated to downstream
    // systems. The ID should have low probability of collision
    // within a single day for a specific service.
    // For http it will be X-Request-ID or equivalent.
    // For tcp is should be a connection id.
    string id = 1;

    // The HTTP request method, such as `GET`, `POST`.
    string method = 2;

    // The HTTP request headers. If multiple headers share the same key, they
    // must be merged according to the HTTP spec. All header keys must be
    // lowercased, because HTTP header keys are case-insensitive.
    map<string, string> headers = 3;

    // The HTTP URL path.
    string path = 4;

    // The HTTP request `Host` or 'Authority` header value.
    string host = 5;

    // The HTTP URL scheme, such as `http` and `https`.
    string scheme = 6;

    // The HTTP URL query in the format of `name1=value`&name2=value2`, as it
    // appears in the first line of the HTTP request. No decoding is performed.
    string query = 7;

    // The HTTP URL fragment. No URL decoding is performed.
    string fragment = 8;

    // The timestamp when the `destination` service receives the first byte of
    // the request.
    google.protobuf.Timestamp time = 9;

    // The HTTP request size in bytes. If unknown, it must be -1.
    int64 size = 10;

    // The network protocol used with the request, such as "http/1.1",
    // "spdy/3", "h2", "h2c", "webrtc", "tcp", "udp", "quic". See
    // https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
    // for details.
    string protocol = 11;

    // A special parameter for request reason. It is used by security systems
    // to associate auditing information with a request.
    string reason = 12;

    // The request authentication. May be absent for unauthenticated requests.
    // Derived from the HTTP request `Authorization` header or equivalent.
    Auth auth = 13;

    // API key used for this request.
    string api_key = 14;
  }

  // Api models the external API surface of a service.
  message Api {
    // The public service name. This is distinct from the in-mesh service identity
    // and reflects the name of the service exposed to the client.
    // example: mypetstore.com
    string service = 1;

    // version of the service.
    string version = 2;

    // Unique string used to identify the operation.
    // The id is unique among all operations described in a specific <service, version>.
    // example: `getPetsById`
    string operation = 3;

    // The protocol type of the API call. Mainly for monitoring/analytics.
    // Note that this is the frontend protocol exposed to the client, not the protocol implemented by the backend service.
    // example: `http`, `grpc`
    string protocol = 4;
  }

  // The source of a network activity, such as starting a TCP connection.
  // In a multi hop network activity, the source represents the sender of the
  // last hop.
  Peer source = 1;

  // The destination of a network activity, such as accepting a TCP connection.
  // In a multi hop network activity, the destination represents the receiver of
  // the last hop.
  Peer destination = 2;

  // The origin of a network activity. In a multi hop network activity,
  // the origin represents the sender of the first hop. For the first hop,
  // the `source` and the `origin` must have the same content.
  Peer origin = 3; 

  // Represents a network request, such as an HTTP request.
  Request request = 4;

  // Api information extracted using the api spec.
  Api api = 5;

  // This is analogous to request.headers, however these contents will not be sent to the upstream server.
  // request_context provides an extension mechanism for sending additional information to the auth server
  // without adding it to request.headers.
  // request_context may map to the internal opaque context in the filter chain.
  map<string, string> request_context = 10;
}


// The following items are left out of this proto
// Caching Protocol
// request_context return values to inject back into the filter chain
// Configuration
// - field mask to send
// - which return values from request_context are copied back
// - which return values are copied into request_headers
