syntax = "proto3";

// [#proto-status: draft]

package envoy.api.v2;


import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

// Authorization service.
// Primarily responds with OK or NOT OK.
service Authorization {
   rpc Check(CheckRequest) returns (CheckResponse);
}

message CheckRequest {
    // The name of the tenant for multi-tenant support.
    string tenant_name = 1;

    // The request attributes.
    AttributeContext attributes = 2;
}

message CheckResponse {
    // Status OK allows the request. Any other response indicates the request should be denied.
    google.rpc.Status status = 1;
}

// An attribute is a piece of metadata that describes an activity on a network.
// For example, the size of an HTTP request, or the status code of an HTTP response.
//
// Each attribute has a type and a name, which is logically defined as a proto message field.
// The fields follow the Istio attribute vocabulary.
// https://istio.io/docs/reference/config/mixer/attribute-vocabulary.html
// The field type becomes the attribute type, and the field path becomes the attribute name.
// For example, the attribute `source.ip` maps to field `AttributeContext.source.ip`.
message AttributeContext {
  // This message defines attributes for a node that handles a network request.
  // The node can be either a service or an application that sends, forwards,
  // or receives the request. Service peers should fill in the `service`,
  // `principal`, and `labels` as appropriate.
  message Peer {
    // The IP address of the peer.
    string ip = 1;

    // The network port of the peer.
    int64 port = 2;

    // The canonical service name of the peer.
    string service = 3;

    // The labels associated with the peer.
    // These could be pod labels for Kubernetes or tags for VMs.
    // The source of the labels could be an X.509 certificate or other configuration.
    map<string, string> labels = 4;

    // The validated identity of this peer.
    // For example, the identity associated with the workload such as a service account.
    // If an X.509 certificate is used to assert the identity this field should be sourced from
    // `Subject` and `Subject Alternative Names`.
    repeated string principals = 5;

    // Other claims about the peer that are not captured in labels and principals.
    google.protobuf.Struct claims = 6;

    // The CLDR country/region code associated with the above IP address.
    // If the IP address is private, the `region_code` should reflect the
    // physical location where this peer is running.
    string region_code = 7;
  }

  // This message defines attributes for an HTTP request. If the actual
  // request is not an HTTP request, the runtime system should try to map
  // the actual request to an equivalent HTTP request.
  message Request {
    // The unique ID for a request, which can be propagated to downstream
    // systems. The ID should have low probability of collision
    // within a single day for a specific service.
    // For http it will be X-Request-ID or equivalent.
    // For tcp is should be a connection id.
    string id = 1;

    // The HTTP request method, such as `GET`, `POST`.
    string method = 2;

    // The HTTP request headers. If multiple headers share the same key, they
    // must be merged according to the HTTP spec. All header keys must be
    // lowercased, because HTTP header keys are case-insensitive.
    map<string, string> headers = 3;

    // The HTTP URL path.
    string path = 4;

    // The HTTP request `Host` or 'Authority` header value.
    string host = 5;

    // The HTTP URL scheme, such as `http` and `https`.
    string scheme = 6;

    // The HTTP URL query in the format of `name1=value`&name2=value2`, as it
    // appears in the first line of the HTTP request. No decoding is performed.
    string query = 7;

    // The HTTP URL fragment. No URL decoding is performed.
    string fragment = 8;

    // The timestamp when the `destination` service receives the first byte of
    // the request.
    google.protobuf.Timestamp time = 9;

    // The HTTP request size in bytes. If unknown, it must be -1.
    int64 size = 10;

    // The network protocol used with the request, such as "http/1.1",
    // "spdy/3", "h2", "h2c", "webrtc", "tcp", "udp", "quic". See
    // https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
    // for details.
    string protocol = 11;
  }

  // The source of a network activity, such as starting a TCP connection.
  // In a multi hop network activity, the source represents the sender of the
  // last hop.
  Peer source = 1;

  // The destination of a network activity, such as accepting a TCP connection.
  // In a multi hop network activity, the destination represents the receiver of
  // the last hop.
  Peer destination = 2;

  // Represents a network request, such as an HTTP request.
  Request request = 4;

  // This is analogous to request.headers, however these contents will not be sent to the upstream server.
  // request_context provides an extension mechanism for sending additional information to the auth server
  // without adding it to request.headers.
  // request_context may map to the internal opaque context in the filter chain.
  map<string, string> request_context = 10;
}

// The following items are left out of this proto
// Request.Auth field for jwt tokens
// Request.Api for api management
// Origin peer that originated the request
// Caching Protocol
// request_context return values to inject back into the filter chain
// Configuration
// - field mask to send
// - which return values from request_context are copied back
// - which return values are copied into request_headers
