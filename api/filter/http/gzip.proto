syntax = "proto3";

// [#proto-status: experimental]

package envoy.api.v2.filter.http;

import "validate/validate.proto";

// This is an HTTP filter which enables Envoy to compress dispatched data from an upstream
// service upon client request. This is useful in situations where large payloads needs to
// be transmitted without compromising the response time. Note that when this filter is
// activated, content will be served with chunked transfer-encoding and gzip content-encoding.
// TODO(gsagula): elaborate the last part in the final documentation.
message Gzip {
  // [#not-implemented-hide:] Value from 1 to 9 that controls the amount of internal memory
  // used by zlib. Higher values usez more memory, but are faster and produce better compression
  // results. Default value is 8.
  uint32 memory_level = 1 [(validate.rules).uint32 = {gte: 1, lte: 9}];

  // [#not-implemented-hide:] Minimum length, in bytes, of a response which will trigger
  // compression. Default value is 30.
  uint32 content_length = 2 [(validate.rules).uint32.gte = 30];

  enum CompressionLevel {
    DEFAULT = 0;
    BEST = 1;
    SPEED = 2;
  }

  // [#not-implemented-hide:] Allows selecting zlib's compression level. This setting will affect
  // speed and amount of compression applied to the content. "BEST" provides higher compression
  // on cost of higher latency, "SPEED" provides lower compression with minimum impact on response
  // time. "DEFAULT" provides an optimal result between speed and compression. Default value is
  // DEFAULT.
  CompressionLevel compression_level = 3;

  enum CompressionStrategy {
    DEFAULT = 0;
    FILTERED = 1;
    HUFFMAN = 2;
    RLE = 3;
  }

  // [#not-implemented-hide:] Allows selecting zlib's compression strategy. Strategy is directly
  // related to the characteristics of the content which is being compressed. Most of the time
  // DEFAULT will be the best choice, however there are situations which changing the strategy might
  // produce better results. For example, Run-length encoding (RLE) is normally used when the
  // content is known for having sequences which same data occurs many consecutive times. For more
  // information about each strategy, please refer to Zlib manual.
  CompressionStrategy compression_strategy = 4;

  // [#not-implemented-hide:] Array of strings that allows specifying which cache-control header
  // values yield compression. Normally, if cache-control is present in the response headers,
  // compression should only occurs if directives indicate that the content should not be cached.
  // For example, no-cache, no-store, etc.
  repeated string cache_control = 5
      [(validate.rules).repeated = {min_items: 0, max_items: 10, unique: true}];

  // [#not-implemented-hide:] Array of strings that allows specifying which mine-types yield
  // compression. For example, application/json, text/html, etc.
  repeated string content_type = 6
      [(validate.rules).repeated = {min_items: 0, max_items: 30, unique: true}];

  // [#not-implemented-hide:] Allows disabling compression if response contains etag (entity tag)
  // header.
  google.protobuf.BoolValue disable_on_etag = 7;

  // [#not-implemented-hide:] Allows disabling compression if response contains last_modified
  // header.
  google.protobuf.BoolValue disable_on_last_modified = 8;
}
