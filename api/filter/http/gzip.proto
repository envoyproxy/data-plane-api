syntax = "proto3";

package envoy.api.v2.filter.http;

import "google/protobuf/wrappers.proto";

import "validate/validate.proto";

// [#protodoc-title: Gzip]
// Gzip :ref:`configuration overview <config_http_filters_gzip>`.

message Gzip {
  // Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
  // use more memory, but are faster and produce better compression results. Default value is 5.
  google.protobuf.UInt32Value memory_level = 1 [(validate.rules).uint32 = {gte: 1, lte: 9}];

  // Minimum response length, in bytes, which will trigger compression. Default value is 30.
  google.protobuf.UInt32Value content_length = 2 [(validate.rules).uint32.gte = 30];

  message CompressionLevel {
    enum Enum {
      DEFAULT = 0;
      BEST = 1;
      SPEED = 2;
    }
  }

  // A value used for selecting Zlib's compression level. This setting will affect speed and amount
  // of compression applied to the content. "BEST" provides higher compression at the cost of higher
  // latency, "SPEED" provides lower compression with minimum impact on response time. "DEFAULT"
  // provides an optimal result between speed and compression. This field will be set to "DEFAULT"
  // if not specified.
  CompressionLevel.Enum compression_level = 3 [(validate.rules).enum.defined_only = true];

  enum CompressionStrategy {
    DEFAULT = 0;
    FILTERED = 1;
    HUFFMAN = 2;
    RLE = 3;
  }

  // A value used for selecting Zlib's compression strategy which is directly related to the
  // characteristics of the content. Most of the time "DEFAULT" will be the best choice, though
  // there are situations which changing this parameter might produce better results. For example,
  // Run-length encoding (RLE) is typically used when the content is known for having sequences
  // which same data occurs many consecutive times. For more information about each strategy, please
  // refer to Zlib manual.
  CompressionStrategy compression_strategy = 4 [(validate.rules).enum.defined_only = true];

  // Set of strings that allows specifying which mime-types yield compression; e.g.,
  // application/JSON, text/HTML, etc. When this field is not defined, compression will be applied
  // to the following MIME-TYPES: "application/javascript", "application/json",
  // "application/xhtml+xml", "image/svg+xml", "text/css", "text/html", "text/plain", "text/xml".
  repeated string content_type = 6 [(validate.rules).repeated = {min_items: 0, max_items: 50}];

  // If true, disables compression when the response contains Etag header. When it is false, the
  // filter will preserve weak Etags and remove the ones that require strong validation. Note that
  // if any of these options fit the specific scenario, an alternative solution is to disabled Etag
  // at the origin and use Last-Modified header instead.
  bool disable_on_etag_header = 7;

  // If true, disables compression when response contains Last-Modified
  // header.
  bool disable_on_last_modified_header = 8;

  // Value from 9 to 15 that represents the base two logarithmic of the compressor's window size.
  // Larger window results in better compression at the expense of memory usage. The default is 12
  // which will produce a 4096 bytes window. For more details about this parameter, please refer to
  // Zlib manual > deflateInit2.
  google.protobuf.UInt32Value window_bits = 9 [(validate.rules).uint32 = {gte: 9, lte: 15}];
}
