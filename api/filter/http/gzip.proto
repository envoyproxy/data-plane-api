syntax = "proto3";

package envoy.api.v2.filter.http;

import "google/protobuf/wrappers.proto";

import "validate/validate.proto";

// [#protodoc-title: Gzip]
// Gzip :ref:`configuration overview <config_http_filters_gzip>`.

message Gzip {
  // Value from 1 to 9 that controls the amount of internal memory used by zlib. Higher values
  // use more memory, but are faster and produce better compression results. Default value is 5.
  google.protobuf.UInt32Value memory_level = 1 [(validate.rules).uint32 = {gte: 1, lte: 9}];

  // Minimum response length, in bytes, which will trigger compression. Default value is 30.
  google.protobuf.UInt32Value content_length = 2 [(validate.rules).uint32.gte = 30];

  message CompressionLevel {
    enum Enum {
      DEFAULT = 0;
      BEST = 1;
      SPEED = 2;
    }
  }

  // Value used for selecting zlib's compression level. This setting will affect
  // speed and amount of compression applied to the content. "BEST" option provides higher
  // compression at cost of higher latency, "SPEED" provides lower compression with minimum impact
  // on response time. "DEFAULT" provides an optimal result between speed and compression. This
  // field will be set to "DEFAULT" if not specified.
  CompressionLevel.Enum compression_level = 3 [(validate.rules).enum.defined_only = true];

  enum CompressionStrategy {
    DEFAULT = 0;
    FILTERED = 1;
    HUFFMAN = 2;
    RLE = 3;
  }

  // Value used for selecting zlib's compression strategy. Strategy is directly
  // related to the characteristics of the content which is being compressed. Most of the time
  // "DEFAULT" will be the best choice, however there are situations which changing the strategy
  // might produce better results. For example, Run-length encoding (RLE) is normally used when the
  // content is known for having sequences which same data occurs many consecutive times. For more
  // information about each strategy, please refer to Zlib manual. This field will be set to
  // "DEFAULT" if not specified.
  CompressionStrategy compression_strategy = 4 [(validate.rules).enum.defined_only = true];

  // Set of strings that allows specifying which mime-types yield compression; e.g.
  // application/json, text/html, etc. When this field is not specified, compression will be applied
  // to the following MIME-TYPES: html, text, css, js, json, svg, xml, xhtml.
  repeated string content_type = 6 [(validate.rules).repeated = {min_items: 0, max_items: 50}];

  // Value that disables compression if response contains Etag (entity tag) header. This option is
  // not enabled by default (false), which means that weak tags will be preserved and strong Etags
  // will be removed from the response. When this option is enabled compression will be skipped in
  // the presence of any entity tag. Note that an alternative solution is to have etag off at the
  // origin and use Last-Modified instead.
  bool disable_on_etag = 7;

  // Value that disables compression if response contains Last-Modified
  // header. Default is false, which means that filter will not skip compression upon the presence
  // of this header.
  bool disable_on_last_modified = 8;

  // Value from 9 to 15 that represents the base two logarithm of the compressor's window size.
  // Larger values result in better compression at the expense of memory usage; e.g. 12 will produce
  // a 4096 bytes window. Default is 12. For more details about this parameter, please refer to Zlib
  // manual > deflateInit2.
  google.protobuf.UInt32Value window_bits = 9 [(validate.rules).uint32 = {gte: 9, lte: 15}];
}
