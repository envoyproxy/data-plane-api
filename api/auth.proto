syntax = "proto3";

package envoy.api.v2;

import "api/address.proto";
import "api/sds.proto";
import "google/rpc/status.proto";

message AuthAction {
  // Should we do white-list or black-list style access control.
  enum ActionType {
    // Request matches all rules are allowed, otherwise denied.
    ALLOW = 0;
    // Request matches all rules or missing required auth fields are denied,
    // otherwise allowed.
    DENY = 1;
  }

  ActionType action_type = 1;

  // Logic AND that requires all rules match.
  message AndRule {
    repeated Rule rules = 1;
  }

  // Logic OR that requires at least one rule matches.
  message OrRule {
    repeated Rule rules = 1;
  }

  // Check peer identity using X.509 certificate.
  message X509Rule {
    // How to validate peer certificates.
    CertificateValidationContext validation_context = 3;
  }

  // Element type of AndRule/OrRule, it chooses among different type of rule.
  message Rule {
    oneof rule_specifier {
      AndRule and_rule = 1;
      OrRule or_rule = 2;
      X509Rule x509_rule = 3;
    }
  }

  // List of rules
  repeated Rule rule = 2;
}

service Authorization {
	rpc Check(CheckRequest) returns (CheckResponse);
}

message CheckRequest {

	// Address of the downstream source of the request.
	Address source = 1;

	// Address of the upstream destination of the request.
	Address destination = 2; 

	// If the request is an HTTP request, the parameters
	// of the HTTP request.
	HTTPRequest http = 3;

	// If the request came over a secure TLS connection, information about the connection and 
	// downstream client.
	TLSConnection tls = 4;
}

message HTTPRequest {

	// HTTP Version of the request, e.g. "1.1"
	string version = 1;

	// Method, e.g. "GET"
	string method = 2;

	// The value of the Host: header
	string host = 3;

	// The request URI path.
	string path = 4;

	// Additional HTTP headers and their values.
	map<string, string> headers = 5;
}

message TLSConnection {

	// True if the connection is encrypted with TLS.  False otherwise. 
	bool tls_encrypted = 1;

	// If the client presented an X.509 certificate, it is contained here.
	X509Cert client_cert = 2;

	// The server certificate used to secure the connection.
	X509Cert server_cert = 3;
}


// An X.509 certificate, with any corresponding fields already decoded by Envoy included.
message X509Cert {

	// The raw certificate as a byte array.
	bytes raw = 1;

	// The decoded Subject string.
	string subject = 2;

	// A SHA256-hash of the certificate.
	string sha_256_hash = 3;

	// Decoded Subject Alternative Names on the certificate. 
	repeated string subject_alt_names = 4;
}


message CheckResponse {

	// Return OK to allow the request.  Any other response indicates the request should be denied.
	google.rpc.Status status = 1;
}